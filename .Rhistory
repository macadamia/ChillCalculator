return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 1){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
gaz <- gaz[-scrub,]
ones <- rep(1,dim(gaz)[1])
places <- row.names(counts)
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
checkThese
counts
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 1){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
gaz <- gaz[-scrub,]
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 1){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
gaz <- gaz[-scrub,]
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
source('~/Dropbox/CodeBits/R/createPlaceNames.R')
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 1){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
counts[checkThese,]
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) > 1){
return(sample(popl,(length(popl)-1)))
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 1){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
counts[checkThese,]
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
places[checkThese]
while(length(checkThese) > 1){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
while(length(checkThese) > 0){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) > 1){
return(sample(popl,(length(popl)-1)))
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 0){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
saveRDS(gaz,file='~/GitHub/ChillCalculator/Data/Gazetteer2010.rds')
runApp()
gaz <- readRDS('Data/Gazetteer2010.rds')
View(gaz)
runApp()
View(gaz)
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) > 1){
return(sample(popl,(length(popl)-1)))
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 0){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
gaz <- read.csv('/Users/uqnwhite/Dropbox/Gazetteer_ASCII/Gazetteer2010_txt.csv',header = F)
noPostCode <- which(gaz[,8] == 9999)
gaz <- gaz[-noPostCode,]
gaz[,3] <- as.character(gaz[,3])
gaz[,4] <- as.character(gaz[,4])
vic <- gaz[which(gaz[,4] == 'VIC'),]
vic[,6] <- as.character(vic[,6])
states <- unique(gaz[,3])
gaz[,6] <- as.character(gaz[,6])
# ga <- which(gaz[,3] == 'GA')
# gaz <- gaz[-ga,]
other <- which(gaz[,6] == 'POPL' | gaz[,6] == 'LOCB') # gaz[,6] == 'LOCU'  | gaz[,6] == 'SUB'  | gaz[,6] == 'URBN')
gaz <- gaz[other,]
library(oz)
oz()
points(gaz[,10],gaz[,14],pch=19,cex=0.5)
gaz <- gaz[,c(4,5,6,8,10,14)]
colnames(gaz) <- c('State','PlaceName','Type','PostCode','Longitude','Latitude')
gaz[,'PlaceStatePostCode'] <- paste(gaz$PlaceName,gaz$State,gaz$PostCode)
View(gaz)
scrubber <-function(these){
locb <- these[which(gaz$Type[these] == 'LOCB')]
popl <- these[which(gaz$Type[these] == 'POPL')]
if(length(popl) == 1){
return(locb)
}
if(length(popl) > 1){
return(sample(popl,(length(popl)-1)))
}
if(length(popl) < 1) {
return(sample(locb,1))
}
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
while(length(checkThese) > 0){
print(length(checkThese))
scrub <-vector()
for(place in places[checkThese]){
these <- grep(place,gaz$PlaceState)
if(length(these) > 1){
scrub <- c(scrub,scrubber(these))
}
print(length(scrub))
if(length(scrub) == 0){
break
}
gaz <- gaz[-scrub,]
print(dim(gaz))
cat('\n')
ones <- rep(1,dim(gaz)[1])
counts <- tapply(ones,list(gaz$PlaceStatePostCode,gaz$Type),sum)
places <- row.names(counts)
checkThese <- which(rowSums(counts,na.rm=T) > 1)
}
saveRDS(gaz,file='~/GitHub/ChillCalculator/Data/Gazetteer2010.rds')
View(gaz)
runApp()
View(gaz)
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
View(gaz)
source('~/GitHub/ChillCalculator/helper.R')
runApp()
location <- 'Ingle'
grep(tolower(location),tolower(gaz$PlaceNameStatePostCode),fixed = T)
gaz$PlaceNameStatePostCode
gaz$PlaceStatePostCode
tolower(gaz$PlaceStatePostCode)
grep(tolower(location),tolower(gaz$PlaceStatePostCode))
grep(tolower(location),tolower(gaz$PlaceStatePostCode),fixed=T)
runApp()
siteInfo[318,]
siteInfo[300:330,]
which(siteInfo$Name == 'Applethorpe')
runApp()
View(siteInfo)
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
runApp()
yearInput <- 2017
checkDate(paste(yearInput,"-01-01",sep=''))
runApp()
checkDate <- function(aDate){
if(as.Date(aDate) < Sys.Date() ){
return(aDate)
} else {
return(paste(strsplit(aDate,'-')[[1]][1],'-01-01',sep=''))
}
checkDate(paste(yearInput,"-01-01",sep=''))
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
source('~/GitHub/ChillCalculator/helper.R')
runApp()
